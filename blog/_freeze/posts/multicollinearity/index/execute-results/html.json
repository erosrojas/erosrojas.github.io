{
  "hash": "6499037f920c60a4b79eca41e70beee8",
  "result": {
    "markdown": "---\ntitle: \"Multicollinearity: An Intuitive Example\"\nauthor: \"Eros Rojas\"\ndate: \"2023-01-08\"\ncategories: [R, Statistics]\nimage: \"colinear.jpg\"\nformat:\n  html:\n    code-fold: show\n    code-summary: \"Show the code\"\n    code-tools: true\n    code-overflow: scroll\n    css: styles.css\nserver: shiny\n---\n\n\n\n\n## **An intuitive visualization of collinearity**\nVisualized in 3 dimensions, with the help of plotly. [(Skip to the interactive example)](#intuition-behind-the-instability)\n\n<br>\n![](3d.jpg)\n<br>\n<br>\n\n### **Understanding what collinearity is:**\n\nAs defined by <a href=\"https://en.wikipedia.org/wiki/Multicollinearity\" target=\"_blank\">Wikipedia</a>, \"*multicollinearity (also collinearity) is a phenomenon in which one predictor variable in a multiple regression model can be linearly predicted from the others with a substantial degree of accuracy.*\" Essentially, this means that an input variable (or multiple variables) is highly correlated with another input variable, to the extent that their relationship is virtually linearly dependent. This can cause numerous issues with respect to the regression analysis, most notably causing: \n\n<ul>\n    <li>Inflated standard error</li>\n    <li>Uninterpretable + Unstable coefficients</li>\n</ul>\n\nAll of these issues will be explained in the following 3 sections.\n<br>\n<br>\n\n#### **Inflated standard error:**\n\nThe standard error of the coefficients of a linear model can be calculated as follows: \n<br><br>\nLets assume a linear model has the following loss function\n\n$$f(w) = ||Xw + \\epsilon - \\hat{y}||_2$$\n\nwhere $\\epsilon$ represents the error terms which follow a normal distribution, such that $\\epsilon \\sim N(0, \\sigma^2)$. Since the given loss function above is fully differentiable and convex, we can find a closed-form solution for its coefficients as\n\n$$w = (X^TX)^{-1}X^T\\hat{y}$$\n\nNow that the coefficients are isolated, finding the variance should be quite straight forward.\n\\begin{align}\n\\mathrm{Var}(w) &= \\mathrm{Var}\\left((X^TX)^{-1}X^T \\hat{y} \\right) \\\\\n&= (X^TX)^{−1}X^T \\cdot \\mathrm{Var}(\\hat{y}) \\cdot X(X^TX)^{−1} \\\\\n&= \\sigma^2 (X^T X)^{-1}\n\\end{align}\n*Note: $\\mathrm{Var}(\\hat{y}) = \\mathrm{Var}(\\epsilon)$ due to the fact that $\\hat{y} = Xw + \\epsilon$, and $Xw$ has a variance of 0 (since $Xw$ is not a random variable)*.\n<br><br>\nIt is clear that $X^T X$ must be a square matrix, therefore, it can be diagonalized such that \n\n$$X^T X = PDP^{-1}$$\n\nwhere $P$ is an invertible matrix containing linearly independent eigenvectors of $X^T X$, and $D$ is a diagonal matrix containing the eigenvalues of $X^T X$ (you can read more about matrix diagonalization <a href=\"https://www.statlect.com/matrix-algebra/matrix-diagonalization\" target=\"_blank\">here</a>). Most notably, the product of the entries of $D$ (the eigenvalues) are equal to the determinant of $D$. When multicollinearity is present, $X^T X$ becomes 'nearly singular' (a matrix which has a determinant very close to $0$, and who's columns are nearly linearly dependent. For reference, a non-singular matrix is linearly independent, and a singular matrix is linearly dependent and has a determinant of $0$). In other words, this means that one or more of the eigenvalues of $D$ must be very close to $0$, or in fact $0$. Given the inverse of the diagonalized matrix above;\n\n$$(X^T X)^{-1} = PD^{-1}P^{-1}$$\n\nthis means that with multicollinearity, $D^{-1}$ must have very large values. This is due to the fact that when the inverse of a matrix is taken, its determinant is essentially divided out from each element of the resulting matrix (this is an oversimplification, look into <a href=\"https://en.wikipedia.org/wiki/Adjugate_matrix\" target=\"_blank\">adjugate matrices</a> if you are interested). This causes $(X^T X)^{-1}$ to subsequently also have very large values, which finally causes $\\mathrm{Var}(w)$ to be very large. This large variance is what causes multicollinearity to severely inflate the standard error of the coefficients.\n<br>\n<br>\n\n#### **Uninterpretable + Unstable coefficients:**\nIn addition to artificially inflating the standard error, collinearity is notorious for causing coefficients to become both uninterpretable, and unstable. To address the first concern, lets define a linear model with two (highly correlated) features: \n\n$$ \\hat{y} = b + x_1 w_1 + x_2 w_2 + \\epsilon$$\n\nIn the case that $x_1$ and $x_2$ are highly correlated, they can subsequently be described by one another, namely $x_1 \\approx x_2$ (assuming $w_1, w_2 > 0$). If this is the case, then\n\\begin{align*} \n    \\hat{y} &= b + x_1 w_1 + x_2 w_2 + \\epsilon \\\\\n    &\\approx b + x_1 w_1 + x_1 w_2 + \\epsilon \\\\\n    &\\approx b + x_1 (w_1 + w_2) + 0 \\cdot x_2 + \\epsilon\n\\end{align*}\nIf $x_1$ and $x_2$ are perfectly correlated, then the weight of $x_2$ can be entirely transferred to $x_1$ (or vise versa) thus leaving $x_2$ with a coefficient of $0$. This may or may not affect the output/predictions of the model, however it does affect how the coefficients are interpreted. For example, consider $x_1$ to be the square footage of a home, $x_2$ to be the number of rooms, and $\\hat{y}$ to be the sell price of the given home. It is clear that $x_1$ and $x_2$ will be collinear (not perfectly collinear though since $x_2$ is discrete), therefore when calculating the coefficients of $w_1$ and $w_2$, getting a result near $0$ for $w_2$ would make no sense as increasing the number of rooms of a home should surely increase the sale price. \n<br>\n<br>\nNot only can it cause coefficients to zero out, it can also cause coefficients to drastically change. Consider the same initial equation as above:\n\\begin{align*} \n    \\hat{y} &= b + x_1 w_1 + x_2 w_2 + \\epsilon \\\\\n    &= b + x_1 w_1 + x_1 w_2 + \\epsilon \\\\\n    &= b + x_1 (w_1 + w_2) + 0 \\cdot x_2 + \\epsilon \\\\\n    &= b + x_1 (w_1 + 10w_2) - 9w_2 x_2 + \\epsilon\n\\end{align*}\nEven though the coefficients are now out-of-wack with respect to the context of the problem (house prices), numerically they are equivalent to the initial linear model. $x_2$ now suggests that the number of rooms of a house has a negative relationship with the sale price of a house, which as we know is ridiculous. Likewise, there are an infinite number of combinations of $w_1$ and $w_2$ that satisfy the initial equation, since we now have an added degree of freedom in the feature matrix. That being said, the resulting values of $w_1$ and $w_2$ will depend on your data, and the severity of collinearity. This leads to the final main concern of multicollinearity: unstable coefficients.\n\n### **Intuition behind the instability:**\n\nIf it was not clear enough above, the uninterpretability and instability of coefficients go hand-in-hand. As collinearity becomes perfect, the coefficients get more and more uninterpretable, and also get increasingly unstable. However, if you do not have a suitable background in linear algebra then it may still be unclear as to how exactly the instability affects the model output. To help give a visual aspect to the problem of collinearity, the following simulation was created to replicate the effects, and issues that arise with collinear features.\n<br>\n<br>\nBelow is a 3D plot that represents the above linear model. $x_1$ and $x_2$ are (nearly) perfect collinear features (some noise was included otherwise $X$ would be singular), and $y$ represents the output of the linear regression model which in this case is a regression plane since we have two input features. The visualization is meant to showcase how sensitive the coefficients are when collinear features are present. There are 1000 data points that make up the data, and by changing the range of the indices that create the linear model, it is clear how much the coefficients change (as seen by the drastic flips of the regression plane). Generally, taking a subset of your data should not change the underlying linear relationship. However, with collinear features even the slightest changes in data can shift the regression weights, as seen from the equations above. \n<br>\n<br>\nTry playing around with the range of the input to see how much the coefficients change.\n\n\n::: {.cell}\n\n:::\n\n\n<iframe id=\"interactive\" src=\"https://erosrojas.shinyapps.io/lin_example/\" style=\"border: none; width: 1200px; height: 850px\" frameborder=\"0\"></iframe>\n\nHopefully this was able to shine some light as to what collinearity is, and the negative implications of collinear features within your data.\npreserve289eaa7e48c2d747\n\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"dependencies\">\n{\"type\":\"list\",\"attributes\":{},\"value\":[]}\n</script>\n<!--/html_preserve-->\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"execution_dependencies\">\n{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\"]}},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\",\"version\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"data.frame\"]},\"row.names\":{\"type\":\"integer\",\"attributes\":{},\"value\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"assertthat\",\"backports\",\"base\",\"broom\",\"cellranger\",\"cli\",\"colorspace\",\"compiler\",\"crayon\",\"datasets\",\"DBI\",\"dbplyr\",\"digest\",\"dplyr\",\"ellipsis\",\"evaluate\",\"fansi\",\"fastmap\",\"forcats\",\"fs\",\"gargle\",\"generics\",\"ggplot2\",\"glue\",\"googledrive\",\"googlesheets4\",\"graphics\",\"grDevices\",\"grid\",\"gtable\",\"haven\",\"hms\",\"htmltools\",\"htmlwidgets\",\"httpuv\",\"httr\",\"jsonlite\",\"knitr\",\"later\",\"lifecycle\",\"lubridate\",\"magrittr\",\"methods\",\"mime\",\"modelr\",\"munsell\",\"pillar\",\"pkgconfig\",\"promises\",\"purrr\",\"R6\",\"Rcpp\",\"readr\",\"readxl\",\"reprex\",\"rlang\",\"rmarkdown\",\"rvest\",\"scales\",\"shiny\",\"stats\",\"stringi\",\"stringr\",\"tibble\",\"tidyr\",\"tidyselect\",\"tidyverse\",\"timechange\",\"tools\",\"tzdb\",\"utf8\",\"utils\",\"vctrs\",\"withr\",\"xfun\",\"xml2\",\"xtable\",\"yaml\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"0.2.1\",\"1.4.1\",\"4.2.2\",\"1.0.1\",\"1.1.0\",\"3.4.1\",\"2.0-3\",\"4.2.2\",\"1.5.2\",\"4.2.2\",\"1.1.3\",\"2.2.1\",\"0.6.30\",\"1.0.10\",\"0.3.2\",\"0.18\",\"1.0.3\",\"1.1.0\",\"0.5.2\",\"1.5.2\",\"1.2.1\",\"0.1.3\",\"3.4.0\",\"1.6.2\",\"2.0.0\",\"1.0.1\",\"4.2.2\",\"4.2.2\",\"4.2.2\",\"0.3.1\",\"2.5.1\",\"1.1.2\",\"0.5.4\",\"1.5.4\",\"1.6.6\",\"1.4.4\",\"1.8.3\",\"1.41\",\"1.3.0\",\"1.0.3\",\"1.9.0\",\"2.0.3\",\"4.2.2\",\"0.12\",\"0.1.10\",\"0.5.0\",\"1.8.1\",\"2.0.3\",\"1.2.0.1\",\"0.3.5\",\"2.5.1\",\"1.0.9\",\"2.1.3\",\"1.4.1\",\"2.0.2\",\"1.0.6\",\"2.20\",\"1.0.3\",\"1.2.1\",\"1.7.4\",\"4.2.2\",\"1.7.8\",\"1.4.1\",\"3.1.8\",\"1.2.1\",\"1.2.0\",\"1.3.2\",\"0.1.1\",\"4.2.2\",\"0.3.0\",\"1.2.2\",\"4.2.2\",\"0.5.1\",\"2.5.0\",\"0.36\",\"1.3.3\",\"1.8-4\",\"2.3.6\"]}]}]}\n</script>\n<!--/html_preserve-->",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {
      "preserve289eaa7e48c2d747": "\n<script type=\"application/shiny-prerendered\" data-context=\"server-extras\">\nojs_define <- function(..., .session = shiny::getDefaultReactiveDomain()) {\n  quos <- rlang::enquos(...)\n  vars <- rlang::list2(...)\n  nm <- names(vars)\n  if (is.null(nm)) {\n    nm <- rep_len(\"\", length(vars))\n  }\n  mapply(function(q, nm, val) {\n    # Infer name, if possible\n    if (nm == \"\") {\n      tryCatch({\n        nm <- rlang::as_name(q)\n      }, error = function(e) {\n        code <- paste(collapse = \"\\n\", deparse(rlang::f_rhs(q)))\n        stop(\"ojs_define() could not create a name for the argument: \", code)\n      })\n    }\n    .session$output[[nm]] <- val\n    outputOptions(.session$output, nm, suspendWhenHidden = FALSE)\n    .session$sendCustomMessage(\"ojs-export\", list(name = nm))\n    NULL\n  }, quos, nm, vars, SIMPLIFY = FALSE, USE.NAMES = FALSE)\n  invisible()\n}\n</script>\n"
    },
    "postProcess": true
  }
}